// Generated by view binder compiler. Do not edit!
package com.example.sweetbakery2.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.sweetbakery2.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAdminBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnAddProduct;

  @NonNull
  public final Button btnLogout;

  @NonNull
  public final Button btnUserManual;

  @NonNull
  public final Button btnViewOrders;

  @NonNull
  public final TextView tvAdminTitle;

  private ActivityAdminBinding(@NonNull LinearLayout rootView, @NonNull Button btnAddProduct,
      @NonNull Button btnLogout, @NonNull Button btnUserManual, @NonNull Button btnViewOrders,
      @NonNull TextView tvAdminTitle) {
    this.rootView = rootView;
    this.btnAddProduct = btnAddProduct;
    this.btnLogout = btnLogout;
    this.btnUserManual = btnUserManual;
    this.btnViewOrders = btnViewOrders;
    this.tvAdminTitle = tvAdminTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAdminBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAdminBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_admin, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAdminBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnAddProduct;
      Button btnAddProduct = ViewBindings.findChildViewById(rootView, id);
      if (btnAddProduct == null) {
        break missingId;
      }

      id = R.id.btnLogout;
      Button btnLogout = ViewBindings.findChildViewById(rootView, id);
      if (btnLogout == null) {
        break missingId;
      }

      id = R.id.btnUserManual;
      Button btnUserManual = ViewBindings.findChildViewById(rootView, id);
      if (btnUserManual == null) {
        break missingId;
      }

      id = R.id.btnViewOrders;
      Button btnViewOrders = ViewBindings.findChildViewById(rootView, id);
      if (btnViewOrders == null) {
        break missingId;
      }

      id = R.id.tvAdminTitle;
      TextView tvAdminTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvAdminTitle == null) {
        break missingId;
      }

      return new ActivityAdminBinding((LinearLayout) rootView, btnAddProduct, btnLogout,
          btnUserManual, btnViewOrders, tvAdminTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
